import sys
import pandas as pd
import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt

#Import tract files generated by extractWM_regions.py
if len(sys.argv) < 3:
    print('Too few inputs specified, at least a subject list and subject directory must be declared')
    exit
subjectDir = str(sys.argv[2])
DirExtName = str(sys.argv[3])
FA_filenames = np.loadtxt('%s' %sys.argv[4],dtype=str)
#Load subjectlist of interest, store IDs as integers
sub_list = np.loadtxt('%s' %sys.argv[1], dtype=str)
#Store subject names as a list with a standard suffix if provided
if len(sys.argv) > 6:
    std_suff = sys.argv[6]
    sub_names = [s + std_suff for s in sub_list]
else:
    sub_names = sub_list

subjectInfo = pd.read_csv(open(sys.argv[5]),delim_whitespace=True,usecols=(4,11))

control_FA = []
nonaff_FA = []
aff_FA = []
print(len(FA_filenames))
n_control = 0
n_aff = 0
n_nonaff = 0
for n in sub_names:
    path_to_data = subjectDir + n + DirExtName
    phen = subjectInfo.loc[subjectInfo['src_subject_id'] == n]
    pdesc = phen['phenotype_description'].values[0]
    for r in FA_filenames:
        fa_filename = path_to_data + r
        fa_file = nib.load(fa_filename)
        fa_data = fa_file.get_fdata()
        FA_val = np.max(fa_data)
        if pdesc == 'In,good,health':
            control_FA.append([FA_val, r])
        if pdesc == 'Non-affective,psychosis':
            nonaff_FA.append([FA_val, r])
        if pdesc == 'Affective,psychosis':
            aff_FA.append([FA_val, r])
    if pdesc == 'In,good,health':
        n_control += 1
    if pdesc == 'Non-affective,psychosis':
        n_nonaff +=1
    if pdesc == 'Affective,psychosis':
        n_aff += 1

c_regionwise_struct = []
n_rw_struct = []
a_rw_struct = []

all_FAs_c = []
mean_FAs_c = []
stdv_FA_c = []

all_FAs_n = []
mean_FAs_n = []
stdv_FA_n = []

all_FAs_a = []
mean_FAs_a = []
stdv_FA_a = []

curr_region = 0
for r in FA_filenames:
    regional_c = [tuple for tuple in control_FA if any(r == i for i in tuple)] #Sort data by region
    reg_n = [tuple for tuple in nonaff_FA if any(r == i for i in tuple)]
    reg_a = [tuple for tuple in aff_FA if any(r == i for i in tuple)]

    c_regionwise_struct.append(regional_c) #Create list of tuples for each group
    n_rw_struct.append(reg_n)
    a_rw_struct.append(reg_a)

    fullc = [list(zip(*c_regionwise_struct[curr_region]))[0],r]
    meanc = [np.mean(list(zip(*c_regionwise_struct[curr_region]))[0]),r]
    stdvc = [np.std(list(zip(*c_regionwise_struct[curr_region]))[0]),r]
    fulln = [list(zip(*n_rw_struct[curr_region]))[0],r]
    meann = [np.mean(list(zip(*n_rw_struct[curr_region]))[0]),r]
    stdvn = [np.std(list(zip(*n_rw_struct[curr_region]))[0]),r]
    fulla = [list(zip(*a_rw_struct[curr_region]))[0],r]
    meana = [np.mean(list(zip(*a_rw_struct[curr_region]))[0]),r]
    stdva = [np.std(list(zip(*a_rw_struct[curr_region]))[0]),r]

    all_FAs_c.append(fullc) #Store all, mean, and standard deviation values in list including region labels
    mean_FAs_c.append(meanc)
    stdv_FA_c.append(stdvc)

    all_FAs_n.append(fulln)
    mean_FAs_n.append(meann)
    stdv_FA_n.append(stdvn)

    all_FAs_a.append(fulla)
    mean_FAs_a.append(meana)
    stdv_FA_a.append(stdva)

    curr_region += 1 #Increase index counter

print(mean_FAs_c)
print(mean_FAs_n)
print(mean_FAs_a)
print(stdv_FA_c)
print(stdv_FA_n)
print(stdv_FA_a)
print(n_control, n_nonaff, n_aff)
#Plot histograms of average FA for each tract for each group (visually inspect if normally distributed) for groups of size n < 30, peform 
#Shapiro-Wilk test for normality
print(all_FAs_c[0][0])
plt.hist(all_FAs_c[0][0])

#Calculate mean and standard deviation for the FA values in each group and perform subsequent T-tests for differences in means with heterogenous variance

#Bonferroni correct for each test performed?